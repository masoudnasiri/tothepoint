services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: procurement_dss
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - procurement_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    # mem_limit: 1g
    # restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/procurement_dss
      - SECRET_KEY=your-secret-key-change-in-production-please-use-strong-key
      # Dynamic values from .env (with safe defaults)
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/__pycache__
      - uploads_data:/app/uploads
    networks:
      - procurement_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --loop asyncio
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/health')\""]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - procurement_network
    depends_on:
      backend:
        condition: service_healthy
    stdin_open: true
    tty: true

volumes:
  postgres_data:
  uploads_data:

networks:
  procurement_network:
    driver: bridge
